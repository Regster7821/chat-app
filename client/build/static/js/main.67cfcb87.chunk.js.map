{"version":3,"sources":["views/StartPage.js","views/ChatPage.js","App.js","serviceWorker.js","index.js"],"names":["className","type","name","placeholder","to","useState","setMessages","io","socket","useEffect","on","msg","prevMessages","App","console","log","data","disconnect","StartPage","path","default","ChatPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAGe,aAGX,OACI,0BAAMA,UAAU,aAChB,yBAAKA,UAAU,aACX,wBAAIA,UAAU,qBAAd,0BACA,wEACA,8BACI,2BAAG,2BAAOA,UAAU,wBAAwBC,KAAK,OAAOC,KAAK,OAAOC,YAAY,gBAChF,4BAAQH,UAAU,0BAAyB,kBAAC,IAAD,CAAMA,UAAU,kBAAkBI,GAAG,SAArC,uB,QCV5C,aAAO,IAAD,EACeC,mBAAS,IADxB,mBACAC,GADA,aAEAD,oBAAS,kBAAME,IAAG,YAA5BC,EAFU,oBAYjB,OARAC,qBAAU,WACND,EAAOE,GAAG,4BAA4B,SAAAC,GAClCL,GAAY,SAAAM,GACR,MAAM,CAAED,GAAR,mBAAgBC,aAMxB,0BAAMZ,UAAU,aACZ,yBAAKA,UAAU,eCYZa,MArBf,WAAgB,IAAD,EACIR,oBAAS,kBAAME,IAAG,YAA5BC,EADM,oBAUb,OAPAC,qBAAU,WAIR,OAHAK,QAAQC,IAAI,oBACZP,EAAOE,GAAG,WAAW,SAAAM,GAAI,OAAIF,QAAQC,IAAIC,MAElC,kBAAMR,EAAOS,YAAW,MAC9B,IAGD,yBAAKjB,UAAU,OACb,0BAAMA,UAAU,aAAY,wBAAIA,UAAU,cAAa,kBAAC,IAAD,CAAMA,UAAU,gBAAgBI,GAAG,gBAAnC,eACvD,kBAAC,IAAD,KACE,kBAACc,EAAD,CAAWC,KAAK,cAAcC,SAAO,IACrC,kBAACC,EAAD,CAAUF,KAAK,aCXHG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.67cfcb87.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from '@reach/router'\n\nexport default () => {\n\n\n    return(\n        <span className='container'>\n        <div className='StartPage'>\n            <h2 className='Get-Started-Title'>Get started right now!</h2>\n            <p>I want to start chatting with the name...</p>\n            <form>\n                <p><input className='Start-Page-Name-Input' type='text' name='name' placeholder='My name...'/></p>\n                <button className='Start-Page-Name-Button'><Link className='StartButtonText' to='/chat'>Start chatting</Link></button>\n            </form>\n        </div>\n        </span>\n    );\n};","import React, { useState, useEffect } from 'react';\nimport io, { Socket } from 'socket.io-client';\n\nexport default () => {\n    const [messages, setMessages] = useState([]);\n    const [socket] = useState(() => io(':8000'));\n\n    useEffect(() => {\n        socket.on('new_messages_from_server', msg => {\n            setMessages(prevMessages => {\n                return [msg, ...prevMessages];\n            });\n        });\n    });\n\n    return(\n        <span className='container'>\n            <div className='ChatPage'>\n\n            </div>\n        </span>\n    );\n};","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport io from 'socket.io-client';\nimport { Router } from '@reach/router';\nimport { Link } from '@reach/router';\nimport StartPage from '../src/views/StartPage';\nimport ChatPage from '../src/views/ChatPage';\n\nfunction App() {\n  const [socket] = useState(() => io(':8000'));\n\n  useEffect(() => {\n    console.log('Is this running?');\n    socket.on('Welcome', data => console.log(data));\n \n    return () => socket.disconnect(true);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <span className='container'><h1 className='main-title'><Link className='MainTitleText' to='/chat/create'>MERN Chat</Link></h1></span>\n      <Router>\n        <StartPage path='/chat/start' default/>\n        <ChatPage path='/chat'/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}